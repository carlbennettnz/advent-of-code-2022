let input = require('fs').readFileSync('../in/07.txt', 'utf8')

console.log('part 1:', ((files, dirs) => [...dirs].map(dir => [dir, Object.entries(files).map(([file, size]) => file.startsWith(dir) ? size : 0).reduce((a, b) => a + b, 0)]).filter(([dir, size]) => size <= 100000).map(([dir, size]) => size).reduce((a, b) => a + b, 0))(...input.trim().split('\n').slice(1).flatMap(line => line.startsWith('$ cd') ? [{ type: 'cd', value: line.slice(5) }] : line.startsWith('$ ls') ? [] : line.startsWith('dir ') ? [{ type: 'dir', value: line.split(' ')[1]}] : [{ type: 'file', value: {size: Number(line.split(' ')[0]), name: line.split(' ')[1]} }]).reduce(([loc, files, dirs], { type, value }) => type === 'cd' ? [value === '..' ? loc.slice(0, -1) : [...loc, value], files, dirs] : type === 'dir' ? [loc, files, dirs.add(loc.map(l => `/${l}`).join('') + '/')] : [ loc, { ...files, [`${loc.map(l => `/${l}`).join('')}/${value.name}`]: value.size }, loc.map((_, i, p) => p.slice(0, i+1).map(x => `/${x}`).join('') + '/').reduce((ds, d) => ds.add(d), dirs) ], [[], {}, new Set()]).slice(1)))
console.log('part 2:', ((files, dirs) => [...dirs].map(dir => [dir, Object.entries(files).map(([file, size]) => file.startsWith(dir) ? size : 0).reduce((a, b) => a + b, 0)]).filter(([dir, size]) => size >= 30000000 - (70000000 - 49192532)).sort((a, b) => a[1] - b[1])[0][1])(...input.trim().split('\n').slice(1) .flatMap(line => line.startsWith('$ cd') ? [{ type: 'cd', value: line.slice(5) }] : line.startsWith('$ ls') ? [] : line.startsWith('dir ') ? [{ type: 'dir', value: line.split(' ')[1]}] : [{ type: 'file', value: {size: Number(line.split(' ')[0]), name: line.split(' ')[1]} }]).reduce(([loc, files, dirs], { type, value }) => type === 'cd' ? [value === '..' ? loc.slice(0, -1) : [...loc, value], files, dirs] : type === 'dir' ? [loc, files, dirs.add(loc.map(l => `/${l}`).join('') + '/')] : [ loc, { ...files, [`${loc.map(l => `/${l}`).join('')}/${value.name}`]: value.size }, loc.map((_, i, p) => p.slice(0, i+1).map(x => `/${x}`).join('') + '/').reduce((ds, d) => ds.add(d), dirs) ], [[], {}, new Set()]).slice(1)))
